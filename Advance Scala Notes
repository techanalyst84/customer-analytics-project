object factorialTailRecursive {
  def factorial(n: Int): Int = {
    def loop(accumulat: Int, n: Int): Int =
      if (n == 0) accumulat
      else loop(accumulat * n, n - 1)
    loop(1, n)
  }
  factorial(0)
  factorial(1)
  factorial(2)
}
object sqrtNestDef {
  1 + 3
  def abs(x: Double) = if (x < 0) -x else x
  def sqrt(x: Double) = {
    def sqrtIter(guess: Double): Double =
      if (isGoodEnough(guess)) guess
      else sqrtIter(improve(guess))

    def isGoodEnough(guess: Double) =
      abs(guess * guess - x) / x < 0.001

    def improve(guess: Double) =
      (guess + x / guess) / 2

    sqrtIter(1.0)
  }
  sqrt(2)
  sqrt(4)
  sqrt(1e60)
}
import scala.math.abs
object fixPointExercise {
  val tolerance = 0.0001
  //  Example of functions that can pass function arguments
  def isCloseEnough(x: Double, y: Double) =
    abs((x - y) / x) / x < tolerance

  def fixedPoint(f: Double => Double)(firstGuess: Double) = {
    def iterate(guess: Double): Double = {
      println(guess)
      val next = f(guess)
      if (isCloseEnough(guess, next)) next
      else iterate(next)
    }

    iterate(firstGuess)
  }
  //  test
  fixedPoint(x => 1 + x / 2)(1)
  //  does not work because next value oscillates between 1 and 2
  //  def sqrt(x: Double) = fixedPoint(y => x / y)(1)

  //  works, but can be better by abstract the average function
  //  def sqrt(x: Double) = fixedPoint(y => (y + x / y) / 2)(1)
  //  sqrt(2)

  //  Example of functions that return functions

  def averageDamp(f: Double => Double)(x: Double) = (x + f(x)) / 2

  def sqrt(x: Double) = fixedPoint(averageDamp(y => x / y))(1)

  sqrt(2)
}
object product {

  def product(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x * y, 1)(a, b)
//  {
//    if (a > b) 1 else f(a) * product(f)(a + 1, b)
//  }

  product(x => x * x)(3, 4)

  // a factorial function in terms of product function
  def fact(a: Int): Int = product(x => x)(1, a)

  fact(5)

  // A general function that generalize product and sum.
  // It is a kind of map-reduce, f function is map, combine function is reduce
  def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int): Int = {
    if (a > b) zero else combine(f(a), mapReduce(f, combine, zero)(a + 1, b))
  }

  mapReduce(x => x * x, (x, y) => x * y, 1)(2, 3)
  mapReduce(x => x * x, (x, y) => x + y, 0)(2, 3)
}
val x = new Rational(1, 3)
val y = new Rational(5, 7)
val z = new Rational(3, 2)
x.numer
x.denom
//x.sub(y).sub(z)
x - y - z
//y.add(y)
y + y
x < y
x.max(y)
new Rational(2)
-x

class Rational(x: Int, y: Int) {
  require(y != 0, "denominator must be nonzero")
  def this(x: Int) = this(x, 1)
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  private val g = gcd(x, y)
  def numer = x / g
  def denom = y / g

  //  we could also turn numer and denom into vals
  //  val numer = x / gcd(x, y)
  //  val denom = y / gcd(x, y)

  //  identifier of method could be Alphanumeric
  //  def less(that: Rational) = numer * that.denom < that.numer * denom
  //  def max(that: Rational) = if (this.less(that)) that else this

  //  identifier of method could be operator symbol
  def <(that: Rational) = numer * that.denom < that.numer * denom

  def +(that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom,
      denom * that.denom)

  def max(that: Rational) = if (this < that) that else this

  // prefix operator, use keyword "unary_" as the prefix of the identifier of method
  def unary_- : Rational = new Rational(-numer, denom)

  def -(that: Rational) = this + -that
  override def toString = numer + "/" + denom
}
object sum {
  def sum(f: Int => Int, a: Int, b: Int): Int = {
    def loop(a: Int, acc: Int): Int = {
      if (a > b) acc
      else loop(a + 1, acc + f(a))
    }
    loop(a, 0)
  }

  sum(x => x * x, 3, 5)
}
package week3
object Hello {
  def main(args: Array[String]) = println("hello world!")
}
package week3
abstract class IntSet {
  def incl(x: Int): IntSet
  def contains(x: Int): Boolean
  def union(that: IntSet): IntSet
}

class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {
  def incl(x: Int): IntSet = {
    if (x < elem) new NonEmpty(elem, left incl x, right)
    else if (x > elem) new NonEmpty(elem, left, right incl x)
    else this
  }

  def contains(x: Int): Boolean = {
    if (x < elem) left contains x
    else if (x > elem) right contains x
    true
  }

  override def toString: String = "{" + left + elem + right + "}"
  def union(other: IntSet): IntSet =
    ((left union right) union other) incl elem
}

class Empty extends IntSet {
  def incl(x: Int): IntSet = new NonEmpty(x, new Empty, new Empty)
  def contains(x: Int): Boolean = false
  override def toString: String = "."
  def union(other: IntSet): IntSet = other
}

object test {
  var t1 = new NonEmpty(3, new Empty, new Empty)
  var t2 = t1 incl 4
  var t3 = new NonEmpty(1, new Empty, new Empty) incl 2
  t2.union(t3)
}
package week3
import java.util.NoSuchElementException
trait List[T] {
  def isEmpty: Boolean
  def head: T
  def tail: List[T]
}

class Cons[T](val head: T, val tail: List[T]) extends List[T] {
  def isEmpty = false

  // What about head and tail definition?
  // Actually, we have already implemented using the parameter names.
  // val head: T is actually a legal implementation for the method head: T in the base class. Same to tail.
  // Fields definitions in classes are really special cases of methods, and they can override methods,
  // and they can implement abstract methods and traits.

  // The difference between val and def concerns only the initialization.
  // A val is evaluated when the object is first initialized.
  // A def is evaluated each time it is referenced.
}

class Nil[T] extends List[T] {
  def isEmpty = true
  // The return type Nothing here is optional as the compiler can infer it.
  // Nothing is also the subtype of any other type, so it is a subtype of T too.
  def head: Nothing = throw new NoSuchElementException("Nil.head")
  def tail: Nothing = throw new NoSuchElementException("Nil.tail")
}

package week3

class Rational(x: Int, y: Int) {
  require(y != 0, "denominator must be nonzero")
  def this(x: Int) = this(x, 1)
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  private val g = gcd(x, y)
  def numer = x / g

  def denom = y / g
  // x is available in method definition
  def printx = println(x)

  //  we could also turn numer and denom into vals
  //  val numer = x / gcd(x, y)
  //  val denom = y / gcd(x, y)

  //  identifier of method could be Alphanumeric
  //  def less(that: Rational) = numer * that.denom < that.numer * denom
  //  def max(that: Rational) = if (this.less(that)) that else this

  //  identifier of method could be operator symbol
  def <(that: Rational) = numer * that.denom < that.numer * denom
  def +(that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom,
      denom * that.denom)

  def max(that: Rational) = if (this < that) that else this
  // prefix operator, use keyword "unary_" as the prefix of the identifier of method
  def unary_- : Rational = new Rational(-numer, denom)
  def -(that: Rational) = this + -that
  override def toString = numer + "/" + denom
}
import week3.
val list = new Cons(1, new Cons(2, new Cons(3, new Nil)))
def nth[T](n: Int, list: List[T]): T = {
  if (n < 0 || list.isEmpty) throw new IndexOutOfBoundsException()
  else if (n == 0) list.head
  else nth(n - 1, list.tail)
}

// expect 3
nth(2, list)

// expect exception
nth(3, list)

import week3.Rational
// one could import multiple names
//import week3.{Rational, Hello}
// one could use wildcard import
//import week3._

val r = new Rational(1, 2)
r.printx
// x is not available as field of class
//r.x
val x = null
val y: String = x
// the type of error is it's a method that
def error(msg: String) = throw new Error(msg)
// error: type mismatch
// val z: Int = null

package week4
trait Expr {
  // pattern matching example
  def eval: Int = this match {
    case Number(n) => n
    case Sum(e1, e2) => e1.eval + e2.eval
  }
  // pattern match example: return string representation of Expr
  def show: String = this match {
    case Number(n) => n.toString
    case Sum(e1, e2) => e1.show + " + " + e2.show
    // my own question: are these patterns and expressions ok?
    case Prod(Sum(e1, e2), e3) => "(" + Sum(e1, e2).show + ") " + " * " + e3.show
    case Prod(e3, Sum(e1, e2)) => e3.show + " * " + "(" + Sum(e1, e2).show + ") "
    case Prod(e1, e2) => e1.show + " * " + e2.show
    case Var(n) => n
  }
}
case class Number(n: Int) extends Expr
case class Sum(e1: Expr, e2: Expr) extends Expr
case class Prod(e1: Expr, e2: Expr) extends Expr
case class Var(n: String) extends Expr
package week4
import java.util.NoSuchElementException
import week3.{Empty, NonEmpty}
// we use +T as we want List to be covariant
trait List[+T] {
  def isEmpty: Boolean
  def head: T
  def tail: List[T]
  // fails varience check
  // def prepend(elem: T): List[T] = new Cons(elem, this)
  // use lower bound to solve the problem of covariance
  def prepend[U >: T](elem: U): List[U] = new Cons(elem, this)
}
class Cons[T](val head: T, val tail: List[T]) extends List[T] {
  def isEmpty = false
  // What about head and tail definition?
  // Actually, we have already implemented using the parameter names.
  // val head: T is actually a legal implementation for the method head: T in the base class. Same to tail.
  // Fields definitions in classes are really special cases of methods, and they can override methods,
  // and they can implement abstract methods and traits.
  // The difference between val and def concerns only the initialization.
  // A val is evaluated when the object is first initialized.
  // A def is evaluated each time it is referenced.
}

//class Nil[T] extends List[T] {
// We only have one instance of Nil, so we change it to object.
// Nothing is the subtype of every class in Scala
object Nil extends List[Nothing] {
  def isEmpty = true
  // The return type Nothing here is optional as the compiler can infer it.
  // Nothing is also the subtype of any other type, so it is a subtype of T too.
  def head: Nothing = throw new NoSuchElementException("Nil.head")
  def tail: Nothing = throw new NoSuchElementException("Nil.tail")
}
// we can call List(1, 2) to create a list of two elements
// List(1, 2) = list.apply(1, 2)
object List {
  def apply[T](x1: T, x2: T): List[T] = new Cons[T](x1, new Cons[T](x2, Nil))
  def apply[T](x: T): List[T] = new Cons[T](x, Nil)
  def apply[T](): List[T] = Nil
}

object test {
  // test List is covariant
  val x: List[String] = Nil
  val s = "abc"
  // this function returns a result of type List[IntSet]
  def f(xs: List[NonEmpty], x: Empty) = xs prepend x
  val b = s.isInstanceOf
  println(b)
}
package week4
/**
  * Simple version of pure Integer (Nature number), not primitive Int
  */
abstract class Nat {
  def isZero: Boolean
  def predecessor: Nat
  def successor: Nat = new Succ(this)
  def +(that: Nat): Nat
  def -(that: Nat): Nat
}

object Zero extends Nat {
  def isZero: Boolean = true
  def predecessor: Nat = throw new Error("0.predecessor")
  def +(that: Nat): Nat = that
  def -(that: Nat): Nat = if (that.isZero) this else throw new Error("negative number")
}

class Succ(n: Nat) extends Nat {
  def isZero: Boolean = false
  def predecessor: Nat = n
  def +(that: Nat): Nat = new Succ(n + that)
  def -(that: Nat): Nat = if (that.isZero) this else n - that.predecessor
}
import week4.{Number, Prod, Sum, Var}
// test pattern matching of show method
Sum(Number(1), Number(50)).show
// 2 * X + Y, no parentheses needed
Sum(Prod(Number(2), Var("X")), Var("Y")).show
// (2 + X) * Y, parentheses needed
Prod(Sum(Number(2), Var("X")), Var("Y")).show
// test insertion sort of list
val unsorted = scala.collection.immutable.List(3, 2, 1)
val sorted = isort(unsorted)
// insertion sort of a list
def isort(xs: scala.collection.immutable.List[Int]): scala.collection.immutable.List[Int] = xs match {
  case scala.collection.immutable.List() => scala.collection.immutable.List()
  case y :: ys => insert(y, isort(ys))
}
// insert an element in a sorted list, so that the new list is also sorted
def insert(x: Int, xs: scala.collection.immutable.List[Int]): scala.collection.immutable.List[Int] = xs match {
  case scala.collection.immutable.List() => scala.collection.immutable.List(x)
  case y :: ys => if (x <= y) x :: xs else y :: insert(x, ys)
}

def squareList(xs: List[Int]): List[Int] = xs match {
  case Nil => Nil
  case y :: ys => y * y :: squareList(ys)
}
squareList(List(1, 2, 3))

// shorter and clearer high order function version
def squareListHighOrder(xs: List[Int]): List[Int] =
  xs map (x => x * x)
squareListHighOrder(List(1, 2, 3))

val nums = List(2, -4, 5, 7, 1)
// gives all positive numbers
nums filter (x => x > 0)
// gives all negative numbers
nums filterNot (x => x > 0)
// combination (pair) of filter and filterNot
nums partition (x => x > 0)

// gives the longest prefix of the list such that the predicate is true
nums takeWhile (x => x > 0)
// gives the suffix of the list by dropping takewhile
nums dropWhile (x => x > 0)
// combination (pair) of takeWhile and dropWhile
nums span (x => x > 0)

// pack the adjacent same elements together
def pack[T](xs: List[T]): List[List[T]] = xs match {
  case Nil => Nil
  case x :: xs1 =>
    val (first, rest) = xs span (y => y == x)
    first :: pack(rest)
}
pack(List(1, 1, 1, 2, 2, 2, 5, 6, 6, 1))

// encode the adjacent same element
def encode[T](xs: List[T]): List[(T, Int)] = {
  pack(xs) map (ys => (ys.head, ys.size))
}
encode(List('a', 'a', 'b', 'b', 'b', 'c', 'a'))

// use foldRight to implement map
def mapFun[T, U](xs: List[T], f: T => U): List[U] =
  (xs foldRight List[U]()) ((x, rest) => f(x) :: rest)
mapFun(List(1,2,3), x => "a" + x)

// use foldRight to implement length
def lengthFun[T](xs: List[T]): Int =
  (xs foldRight 0) ((_, len) => len + 1)
lengthFun(List(1,2,3))

// get the last element of list
def last[T](xs: List[T]): T = xs match {
  case List() => throw new Error("list is empty")
  case List(x) => x
  case y :: ys => last(ys)
}
last(List(1, 5, 8))
// get all elements except for the last element of list
def init[T](xs: List[T]): List[T] = xs match {
  case List() => throw new Error("list is empty")
  case List(x) => List()
  case y :: ys => y :: init(ys)
}
init(List(1, 5, 8))
// concatenate two lists
// complexity: O(n) where n is the size of list xs
def concat[T](xs: List[T], ys: List[T]): List[T] = xs match {
  case List() => ys
  case z :: zs => z :: concat(zs, ys)
}
concat(List(10, 20, 30), List(40, 50))
// reverse a list
// complexity: O(n^2) where n is the size of list xs.
// The concatenation ++ takes O(n) time and we do the reverse n times.
def reverse[T](xs: List[T]): List[T] = xs match {
  case List() => xs
  case y :: ys => reverse(ys) ++ List(y)
}
reverse(List(1, 2, 3))
// remove the nth element from the list.
// if n is larger than the size of the list, return the list
def removeAt[T](n: Int, xs: List[T]): List[T] =
//xs match {
//  case List() => xs
//  case y :: ys => if (n == 0) ys else y :: removeAt(n - 1, ys)
//}
(xs take n) ::: (xs drop n + 1)
removeAt(1, List(1, 5, 8))
// flatten all elements in the given list
def flatten(xs: List[Any]): List[Any] = xs match {
  case List() => xs
  case (y: List[_]) :: ys => flatten(y) ++ flatten(ys)
  case y :: ys => y :: flatten(ys)
}
flatten(List(List(1, 1), 2, List(3, List(5, 8))))
// complexity: O(nlgn)
def msort[T](xs: List[T])(implicit ord: Ordering[T]): List[T] = {
  val n = xs.length / 2
  if (n == 0) xs
  else {
    // merge two sorted list
    def merge(xs: List[T], ys: List[T]): List[T] = (xs, ys) match {
      case (Nil, _) => ys
      case (_, Nil) => xs
      case (x :: xs1, y :: ys1) =>
        if (ord.lt(x, y)) x :: merge(xs1, ys)
        else y :: merge(xs, ys1)
    }
    val (fst, snd) = xs splitAt n
    merge(msort(fst), msort(snd))
  }
}
// Scala compiler use the companion object of Ordering for the right type
msort(List(3, 6, 1, 4, 2))
msort(List("apple", "pinapple", "banana"))
val words = List("Java", "Kata")
val mnem = Map(
  '2' -> "ABC", '3' -> "DEF", '4' -> "GHI", '5' -> "JKL",
  '6' -> "MNO", '7' -> "PQRS", '8' -> "TUV", '9' -> "WXYZ"
)
// invert the mnem map to give a map from chars 'A' ... 'Z' to '2'...'9'
val charCode: Map[Char, Char] =
  for ((digit, str) <- mnem; ltr <- str) yield ltr -> digit
// maps a word to the digit string, e.g. "Java" -> "5282"
def wordCode(word: String): String =
word.toUpperCase() map charCode // maps are functions

def wordsFromNum: Map[String, Seq[String]] =
  words groupBy wordCode withDefaultValue Seq()

def encode(number: String): Set[List[String]] =
  if (number.isEmpty) Set(List())
  else {
    for {
      split <- 1 to number.length
      word <- wordsFromNum(number take split)
      rest <- encode(number drop split)
    } yield word :: rest
  }.toSet
  // test
val p1 = new Poly(1 -> 2.0, 3 -> 4.0, 5 -> 6.2)
val p2 = new Poly(0 -> 3.0, 3 -> 7.0)
class Poly(terms0: Map[Int, Double]) {
  val terms = terms0 withDefaultValue 0.0
  // auxiliary constructor
  // * here means it's a repeated parameter, internally all the arguments are represented as a sequence
  def this(bindings: (Int, Double)*) = this(bindings.toMap)
  //  def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))
  //  def adjust(term: (Int, Double)) : (Int, Double) = {
  //    val (exp, coeff) = term
  //    exp -> (coeff + terms(exp))
  //  }
  // more efficient way to add polynomials using foldLeft, because it avoid creating the whole list of other.terms map adjust
  def +(other: Poly) = new Poly((other.terms foldLeft terms)(addTerm))
  def addTerm(terms: Map[Int, Double], term: (Int, Double)): Map[Int, Double] = {
    val (exp, coeff) = term
    terms + (exp -> (coeff + terms(exp)))
  }
  override def toString =
    (for ((exp, coeff) <- terms.toList.sorted.reverse) yield coeff + "x^" + exp) mkString " + "
}

p1 + p2
